// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  bookings  Booking[]
  reviews   Review[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  icon  String

  tours Tour[] // One-to-many relationship (one category can have many tours)
}

model Tour {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  price          Float
  categoryId     Int       // Foreign key for Category
  category       Category  @relation(fields: [categoryId], references: [id]) // Many-to-one relationship
  destination    String
  availableSlots Int
  startDate      DateTime
  endDate        DateTime
  bookings       Booking[]
  reviews        Review[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  Itinerary Itinerary[]
}


model Booking {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  tour            Tour          @relation(fields: [tourId], references: [id])
  tourId          Int
  numberOfPeople  Int
  status          BookingStatus  @default(PENDING)
  totalPrice      Float
  payment         Payment?
  bookingDate     DateTime      @default(now())
  dateBooked      DateTime?       // New field for the time slot booked
  dateOfBooking   DateTime?     // New field for the time of the actual booking
}

// Enum for booking status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Payment {
  id            Int           @id @default(autoincrement())
  booking       Booking       @relation(fields: [bookingId], references: [id])
  bookingId     Int           @unique
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime      @default(now())
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tour      Tour     @relation(fields: [tourId], references: [id])
  tourId    Int
  rating    Int // Rating out of 5
  comment   String?
  createdAt DateTime @default(now())
}

model Itinerary {
  id          Int    @id @default(autoincrement())
  tour        Tour   @relation(fields: [tourId], references: [id])
  tourId      Int
  day         Int // Day of the itinerary (1, 2, 3, etc.)
  description String
}
